sqlplus '/as sysdba'
startup
conn hr/hr

index 정보 확인
select t.index_name, c.column_name, c.column_position 
from user_indexes t, user_ind_columns c
where t.index_name=c.index_name
and t.table_name='EMPLOYEES';

col index_name format a20
col column_name format a15

select employee_id, last_name, salary, job_id
from employees
where employee_id=150;

parsing 
library cache: 쿼리문존재여부 확인
존재하지 않는 경우: hard parsing
                           syntax check : 문법확인
                           semantics check: object존재여부, 권한여부
                           --> 쿼리문을 library에 저장
                                 optimizer : execution plan 요청
존재하는 경우: soft parsing -> execution으로 넘어간다.

execution:
db buffer cache에 해당 데이터행의 존재여부 판단
존재하지 않는 경우: 물리적인 data file로부터 읽어와 db buffer에 저장.
                           db buffer에 올려져 있는 데이터행을 read하여
                           사용자에게 보낸다.
존재하는 경우: db buffer에 올려져 있는 데이터행을 read하여
                           사용자에게 보낸다.

fetch : 사용자에게 보여지게 한다.
      

set autotrace traceonly explain

select employee_id, last_name, salary, job_id
from employees
where employee_id>=150;

select employee_id, last_name, salary, job_id
from employees
where last_name='King' and first_name='Steven';

select employee_id, last_name, salary, job_id
from employees
where first_name='Steven';

select employee_id, last_name, salary, job_id
from employees
where department_id=80;

hint : 사용자가 index scan 을 하도록 강제가능
select /*+ index(employees emp_department_ix)*/
        employee_id, last_name, salary, job_id
from employees
where department_id=80;

constraint 지정, index 지정 : performance 차이 발생
set autotrace off

synonym : 사용자가 객체를 쉽게 참조할 수 있다.
              쿼리문을 단순화할 수 있다.
              참조되는 객체의 소유자나 객체자체를 감출수 있어 보안유지
dba 권한으로 public
create public synonym 시노님명 for 소유자.객체명;

conn /as sysdba
create public synonym hr_emp for hr.employees;

데이터 접근 제어: privilege
privilege: system 권한, object 권한
system 권한: Database access 에 관한 권한
object 권한: Database Object에 대한 권한

system 권한: dba만 조작할 수 있다.
user를 생성한다.
create user dba11 identified by dba11;
현재 database에 있는 user 확인
select username from dba_users;
dba11 user가 session(접속:논리적연결)을 생성할 권한이 없다.

session생성 권한을 부여하자 
:dba가 권한 부여가능
conn /as sysdba

권한 부여: dcl : grant / revoke
grant create session to dba11;
conn dba11/dba11
dba11 이 갖고 있는 권한 확인
: select * from user_sys_privs;

system 권한: create session, create table, create sequence, ...
grant  create session, create table, create sequence, ,,,
to dba11;

role : 기본적으로 부여할 권한들을 모아둔 것
role 생성 <-- 필요한 권한들을 부여,
---> role 부여하면 role이 갖고 있는 모든 권한이 부여된다.
create role mgr;
grant create table, create session, create view, create sequence
to mgr;
grant mgr to dba11;

connect 롤: create session, 
resource 롤: table, view, sequence,  ,..,, 생성 권한

권한 부여해주는자: grantor, 권한 부여받는자: grantee
conn /as sysdba
select * from dba_sys_privs
where grantee in ('CONNECT', 'RESOURCE');

grant connect, resource to dba11;
dba11에게 부여된 role을 확인
select * from dba_role_privs
where grantee='DBA11';

desc dictionary

select table_name from dictionary
where table_name like '%ROLE%';

desc user_role_privs
select granted_role from user_role_privs;

conn dba11/dba11

/as sysdba로 접속해 public synonym hr_emp
select * from hr_emp;

hr유저의 employees 테이블에 대한 접근 권한
Object privilege
객체마다 select, insert, update, delete,.. 권한을 부여해야 한다.
객체의 소유자가 각각의 객체권한을 부여해야 한다.
hr의 employees에 
conn hr/hr
grant select on employees to dba11;

conn dba11/dba11
select * from hr.employees;
select * from hr_emp;
select table_name from user_tables;

create table emp as
select * from hr_emp where department_id=50;

dba11은 hr 유저로부터 employees에 대한 select권한 부여받았다.
부여받은  권한을 다른 user에게 불여할 수 없다.

conn /as sysdba
create user test identified by test;
grant connect to test;
conn test/test

conn dba11/dba11
grant select on hr.employees to test;

hr 유저가 employees에 대한 select권한은 dba11에게 부여할때
권한을 부여받은 dba11이 다른 유저에게도 부여할 수 있도록
옵션을 지정할 수 있다. : with grant option

conn hr/hr
grant select on jobs to dba11 with grant option;

conn dba11/dba11
select * from hr.jobs;
grant select on hr.jobs to test;  
<- dba11이 hr로부터 부여받은 권한을 test에게 부여

conn test/test
select * from hr.jobs;

hr가 dba11으로부터 부여한 권한을 취소한다.
: dba11이가 다른 유저에게 부여한 권한도 취소된다.

revoke select on jobs from dba11;

데이터베이스 링크
링크를 사용해 같은 시스템내의 다른 database
또는 다른 시스템의 원격database에의 접근이 가능하다
conn hr/hr
select * from user_sys_privs;

hr 유저가 dba15 SID의 hr유저에 접근할 링크 생성
create database link link15
using 'dba15';

drop database link link15;


select * 
from employees@link15
where department_id=10;

conn /as sysdba

다른 DB에서 특정 user에 링크를 사용할때는 접속 인증을 추가
SID가 dba15인 곳에 접속한다.
15 -> sqlplus '/as sysdba'
12명이 15번에 sysdba로 접속한 상태
create user ojk identified by ojk;
grant connect, resource to ojk;

conn ojk/ojk
create table link_ojk(
id number(2),
name varchar2(10)
);

insert into link_ojk
values (1, 'jinkyung');
insert into link_ojk
values (1, 'ohjk');
commit;

dba11 의 모든 user에서 dba15의 ojk 유저에 접근할 링크를 만들자
conn /as sysdba
select name from v$database;

create public database link link15_ojk
connect to ojk identified by ojk 
using 'dba15';

select * from link_ojk@link15_ojk;

oracle이 db 접속에 사용하는 데이터전송기술: tns
TNS(ransparent Network Substrate) 
tnsnames.ora



!
cd /oracle/product/11g/network/admin
ls
vi tnsnames.ora

listener.ora


:q!







sqlplus hr/hr@121.148.71.10:1521/dba11

listener 상태: lsnrctl status

create pfile from spfile;

















































http://vue.com/oracle/
eSofting
city: Seoul
country: Korea. Republic of































